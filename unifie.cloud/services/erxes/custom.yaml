apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: elasticsearch-claim0
  name: elasticsearch-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: elasticsearch
    spec:
      containers:
        - env:
            - name: discovery.type
              value: single-node
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
          name: elasticsearch
          ports:
            - containerPort: 9200
              protocol: TCP
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elasticsearch-claim0
      restartPolicy: Always
      volumes:
        - name: elasticsearch-claim0
          persistentVolumeClaim:
            claimName: elasticsearch-claim0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
  selector:
    io.kompose.service: elasticsearch
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: essyncer-claim0
  name: essyncer-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: essyncer-claim1
  name: essyncer-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: essyncer
  name: essyncer
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: essyncer
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: essyncer
    spec:
      containers:
        - env:
            - name: DB_NAME
              value: erxes
            - name: ELASTICSEARCH_URL
              value: http://elasticsearch:9200
            - name: MONGO_URL
              value: mongodb://mongo:27017/erxes?replicaSet=rs0
          image: erxes/essyncer:dev
          name: essyncer
          tty: true
          volumeMounts:
            - mountPath: /data/essyncerData
              name: essyncer-claim0
            - mountPath: /var/log/mongo-connector
              name: essyncer-claim1
      restartPolicy: Always
      volumes:
        - name: essyncer-claim0
          persistentVolumeClaim:
            claimName: essyncer-claim0
        - name: essyncer-claim1
          persistentVolumeClaim:
            claimName: essyncer-claim1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: mongo-claim0
  name: mongo-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: mongo
    spec:
      containers:
        - args:
            - --replSet
            - rs0
            - --bind_ip_all
          image: mongo:4.0.10
          livenessProbe:
            exec:
              command:
                - test $(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
            failureThreshold: 200
            periodSeconds: 2
            timeoutSeconds: 2
          name: mongo
          ports:
            - containerPort: 27017
              protocol: TCP
          volumeMounts:
            - mountPath: /data/db
              name: mongo-claim0
      hostname: mongo
      restartPolicy: Always
      volumes:
        - name: mongo-claim0
          persistentVolumeClaim:
            claimName: mongo-claim0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    io.kompose.service: mongo
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: rabbitmq-claim0
  name: rabbitmq-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: rabbitmq
    spec:
      containers:
        - image: rabbitmq:3.7.17-management
          name: rabbitmq
          ports:
            - containerPort: 15672
              protocol: TCP
            - containerPort: 5672
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: rabbitmq-claim0
      hostname: rabbitmq
      restartPolicy: Always
      volumes:
        - name: rabbitmq-claim0
          persistentVolumeClaim:
            claimName: rabbitmq-claim0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  ports:
    - name: "15672"
      port: 15672
      targetPort: 15672
    - name: "5672"
      port: 5672
      targetPort: 5672
  selector:
    io.kompose.service: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: redis
    spec:
      containers:
        - image: redis
          name: redis
          ports:
            - containerPort: 6379
              protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: redis
  name: redis
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: redis
